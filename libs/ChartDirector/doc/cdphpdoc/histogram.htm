<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Histogram with Bell Curve</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.1 (PHP Edition)</p>
<p class="heading1">Histogram with Bell Curve</p>
<hr class="separator">
<div class="content">
<img src="images/histogram.png">
<br><br>
The example demonstrates creating a histogram with a bell curve.<br><br>
A histogram is chart plotting the distribution of numerical data. Typically, this is by plotting count of objects that fall within certain data ranges. The most common data representation is bars, as a bar can represent the count with its height, and the data range with its position and its width.<br><br>
One of the most common types of distribution is the normal distribution. So it is common to add a normal distribution curve (also known as the bell curve) on the chart.<br><br>
In this example, the histogram is achieved by using a bar layer (<a href="BarLayer.htm">BarLayer</a>), and the normal distribution curve by using a spline layer (<a href="SplineLayer.htm">SplineLayer</a>). About half of the code in this example is in computing the data to be passed to the bar layer and spline layer, and the other half creating the chart. The <a href="ArrayMath.htm">ArrayMath</a> utility class is used to obtain the max, min, mean and standard deviation, thereby simplifying the computation code.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[File: phpdemo/histogram.php]</b>
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;?php
require_once("../lib/phpchartdir.php");

#
# This example demonstrates creating a histogram with a bell curve from raw data. About half of the
# code is to sort the raw data into slots and to generate the points on the bell curve. The
# remaining half of the code is the actual charting code.
#

# Generate a random guassian distributed data series as the input data for this example.
$r = new RanSeries(66);
$samples = $r-&gt;getGaussianSeries(200, 100, 10);

#
# Classify the numbers into slots. In this example, the slot width is 5 units.
#
$slotSize = 5;

# Compute the min and max values, and extend them to the slot boundary.
$m = new ArrayMath($samples);
$minX = floor($m-&gt;min() / $slotSize) * $slotSize;
$maxX = floor($m-&gt;max() / $slotSize) * $slotSize + $slotSize;

# We can now determine the number of slots
$slotCount = (int)(($maxX - $minX + 0.5) / $slotSize);
$frequency = array_pad(array(), $slotCount, 0);

# Count the data points contained in each slot
for($i = 0; $i &lt; count($samples); ++$i) {
    $slotIndex = (int)(($samples[$i] - $minX) / $slotSize);
    $frequency[$slotIndex] = $frequency[$slotIndex] + 1;
}

#
# Compute Normal Distribution Curve
#

# The mean and standard deviation of the data
$mean = $m-&gt;avg();
$stdDev = $m-&gt;stdDev();

# The normal distribution curve (bell curve) is a standard statistics curve. We need to vertically
# scale it to make it proportion to the frequency count.
$scaleFactor = $slotSize * count($samples) / $stdDev / sqrt(6.2832);

# In this example, we plot the bell curve up to 3 standard deviations.
$stdDevWidth = 3.0;

# We generate 4 points per standard deviation to be joined with a spline curve.
$bellCurveResolution = (int)($stdDevWidth * 4 + 1);
$bellCurve = array_pad(array(), $bellCurveResolution, 0);
for($i = 0; $i &lt; $bellCurveResolution; ++$i) {
    $z = 2 * $i * $stdDevWidth / ($bellCurveResolution - 1) - $stdDevWidth;
    $bellCurve[$i] = exp(-$z * $z / 2) * $scaleFactor;
}

#
# At this stage, we have obtained all data and can plot the chart.
#

# Create a XYChart object of size 600 x 360 pixels
$c = new XYChart(600, 360);

# Set the plotarea at (50, 30) and of size 500 x 300 pixels, with transparent background and border
# and light grey (0xcccccc) horizontal grid lines
$c-&gt;setPlotArea(50, 30, 500, 300, Transparent, -1, Transparent, 0xcccccc);

# Display the mean and standard deviation on the chart

$c-&gt;addTitle(sprintf("Mean = %s, Standard Deviation = %s", $c-&gt;formatValue($mean, "{value|1}"),
    $c-&gt;formatValue($stdDev, "{value|2}")), "arial.ttf");


# Set the x and y axis label font to 12pt Arial
$c-&gt;xAxis-&gt;setLabelStyle("arial.ttf", 12);
$c-&gt;yAxis-&gt;setLabelStyle("arial.ttf", 12);

# Set the x and y axis stems to transparent, and the x-axis tick color to grey (0x888888)
$c-&gt;xAxis-&gt;setColors(Transparent, TextColor, TextColor, 0x888888);
$c-&gt;yAxis-&gt;setColors(Transparent);

# Draw the bell curve as a spline layer in red (0xdd0000) with 2-pixel line width
$bellLayer = $c-&gt;addSplineLayer($bellCurve, 0xdd0000);
$bellLayer-&gt;setXData2($mean - $stdDevWidth * $stdDev, $mean + $stdDevWidth * $stdDev);
$bellLayer-&gt;setLineWidth(2);

# Draw the histogram as bars in blue (0x6699bb) with dark blue (0x336688) border
$histogramLayer = $c-&gt;addBarLayer($frequency, 0x6699bb);
$histogramLayer-&gt;setBorderColor(0x336688);
# The center of the bars span from minX + half_bar_width to maxX - half_bar_width
$histogramLayer-&gt;setXData2($minX + $slotSize / 2.0, $maxX - $slotSize / 2.0);
# Configure the bars to touch each other with no gap in between
$histogramLayer-&gt;setBarGap(TouchBar);
# Use rounded corners for decoration
$histogramLayer-&gt;setRoundedCorners();

# ChartDirector by default will extend the x-axis scale by 0.5 unit to cater for the bar width. It
# is because a bar plotted at x actually occupies (x +/- half_bar_width), and the bar width is
# normally 1 for label based x-axis. However, this chart is using a linear x-axis instead of label
# based. So we disable the automatic extension and add a dummy layer to extend the x-axis scale to
# cover minX to maxX.
$c-&gt;xAxis-&gt;setIndent(false);
$lineLayerObj = $c-&gt;addLineLayer2();
$lineLayerObj-&gt;setXData($minX, $maxX);

# For the automatic y-axis labels, set the minimum spacing to 40 pixels.
$c-&gt;yAxis-&gt;setTickDensity(40);

# Output the chart
header("Content-type: image/png");
print($c-&gt;makeChart2(PNG));
?&gt;</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
