<!DOCTYPE html>
<HTML>
<HEAD><meta name="viewport" content="width=device-width, initial-scale=1">
<Title>Finance Chart Custom Symbols</Title>
<link type='text/css' rel='Stylesheet' href="maxchartapi.css" />
</HEAD>
<body bgcolor="#FFFFFF" text="#000000" topmargin="0" leftmargin="0" rightmargin="0" marginwidth="0" marginheight="0">

<p class="heading0">ChartDirector 6.1 (PHP Edition)</p>
<p class="heading1">Finance Chart Custom Symbols</p>
<hr class="separator">
<div class="content">
<img src="images/financesymbols.png">
<br><br>
This example demonstrates adding custom symbols to a finance chart.<br><br>
The custom symbols are achieved by using <a href="XYChart.addScatterLayer.htm">XYChart.addScatterLayer</a> to add a scatter layer to the main price chart. The data for the scatter layer is an array of the same length as the timestamps array, which are used to specify the position of the symbols. For trading sessions that do not require symbols, <a href="phpchartdir.NoValue.htm">NoValue</a> can be used as the data value.<br><br>
The scatter symbols in this example are arrows created with <a href="phpchartdir.ArrowShape.htm">ArrowShape</a>. Different types of symbols are created using different scatter layers. The arrows are positioned at the high or low values, and shifted upwards or downwards with <a href="DataSet.setSymbolOffset.htm">DataSet.setSymbolOffset</a> to avoid overlapping with the candlesticks.
</div>
<p class="heading1a">Source Code Listing</p>
<div class="content">
<b>[File: phpdemo/financesymbols.php]</b>
<table width="98%" border="0" cellpadding="10"><tr><td bgcolor="#cccccc"><pre>&lt;?php
require_once("../lib/FinanceChart.php");

# Create a finance chart demo containing 100 days of data
$noOfDays = 100;

# To compute moving averages starting from the first day, we need to get extra data points before
# the first day
$extraDays = 30;

# In this exammple, we use a random number generator utility to simulate the data. We set up the
# random table to create 6 cols x (noOfDays + extraDays) rows, using 9 as the seed.
$rantable = new RanTable(9, 6, $noOfDays + $extraDays);

# Set the 1st col to be the timeStamp, starting from Sep 4, 2014, with each row representing one
# day, and counting week days only (jump over Sat and Sun)
$rantable-&gt;setDateCol(0, chartTime(2014, 9, 4), 86400, true);

# Set the 2nd, 3rd, 4th and 5th columns to be high, low, open and close data. The open value starts
# from 100, and the daily change is random from -5 to 5.
$rantable-&gt;setHLOCCols(1, 100, -5, 5);

# Set the 6th column as the vol data from 5 to 25 million
$rantable-&gt;setCol(5, 50000000, 250000000);

# Now we read the data from the table into arrays
$timeStamps = $rantable-&gt;getCol(0);
$highData = $rantable-&gt;getCol(1);
$lowData = $rantable-&gt;getCol(2);
$openData = $rantable-&gt;getCol(3);
$closeData = $rantable-&gt;getCol(4);
$volData = $rantable-&gt;getCol(5);

# Custom data series should be of the same length as the OHLC data series
$buySignal = array_pad(array(), count($closeData), 0);
$sellSignal = array_pad(array(), count($closeData), 0);

#
# The following is just an arbitrary algorithm to create some meaningless buySignal and sellSignal.
# They are just for demonstrating the charting engine. Please do not use them for actual trading.
#

$tmpArrayMath1 = new ArrayMath($closeData);
$tmpArrayMath1-&gt;movAvg(5);
$sma5 = $tmpArrayMath1-&gt;result();
$tmpArrayMath1 = new ArrayMath($closeData);
$tmpArrayMath1-&gt;movAvg(20);
$sma20 = $tmpArrayMath1-&gt;result();

for($i = 0; $i &lt; count($sma5); ++$i) {
    $buySignal[$i] = NoValue;
    $sellSignal[$i] = NoValue;
    if ($i &gt; 0) {
        if (($sma5[$i - 1] &lt;= $sma20[$i - 1]) &amp;&amp; ($sma5[$i] &gt; $sma20[$i])) {
            $buySignal[$i] = $lowData[$i];
        }
        if (($sma5[$i - 1] &gt;= $sma20[$i - 1]) &amp;&amp; ($sma5[$i] &lt; $sma20[$i])) {
            $sellSignal[$i] = $highData[$i];
        }
    }
}

# Create a FinanceChart object of width 640 pixels
$c = new FinanceChart(640);

# Add a title to the chart
$c-&gt;addTitle("Finance Chart with Custom Symbols");

# Set the data into the finance chart object
$c-&gt;setData($timeStamps, $highData, $lowData, $openData, $closeData, $volData, $extraDays);

# Add the main chart with 240 pixels in height
$mainChart = $c-&gt;addMainChart(240);

# Add buy signal symbols to the main chart, using cyan (0x00ffff) upward pointing arrows as symbols
$buyLayer = $mainChart-&gt;addScatterLayer(null, $buySignal, "Buy", ArrowShape(0, 1, 0.4, 0.4), 11,
    0x00ffff);
# Shift the symbol lower by 20 pixels
$dataSetObj = $buyLayer-&gt;getDataSet(0);
$dataSetObj-&gt;setSymbolOffset(0, 20);

# Add sell signal symbols to the main chart, using purple (0x9900cc) downward pointing arrows as
# symbols
$sellLayer = $mainChart-&gt;addScatterLayer(null, $sellSignal, "Sell", ArrowShape(180, 1, 0.4, 0.4),
    11, 0x9900cc);
# Shift the symbol higher by 20 pixels
$dataSetObj = $sellLayer-&gt;getDataSet(0);
$dataSetObj-&gt;setSymbolOffset(0, -20);

# Add a 5 period simple moving average to the main chart, using brown color
$c-&gt;addSimpleMovingAvg(5, 0x663300);

# Add a 20 period simple moving average to the main chart, using purple color
$c-&gt;addSimpleMovingAvg(20, 0x9900ff);

# Add candlestick symbols to the main chart, using green/red for up/down days
$c-&gt;addCandleStick(0x66ff66, 0xff6666);

# Add a volume indicator chart (75 pixels high) after the main chart, using green/red/grey for
# up/down/flat days
$c-&gt;addVolIndicator(75, 0x99ff99, 0xff9999, 0x808080);

# Append a 14-days RSI indicator chart (75 pixels high) after the main chart. The main RSI line is
# purple (800080). Set threshold region to +/- 20 (that is, RSI = 50 +/- 25). The upper/lower
# threshold regions will be filled with red (ff0000)/blue (0000ff).
$c-&gt;addRSI(75, 14, 0x800080, 20, 0xff0000, 0x0000ff);

# Output the chart
header("Content-type: image/png");
print($c-&gt;makeChart2(PNG));
?&gt;</pre></td></tr></table>
</div>
<br><hr class="separator"><div class="copyright">&copy; 2017 Advanced Software Engineering Limited. All rights reserved.</div>
</body>
</HTML>
